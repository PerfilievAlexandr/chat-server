// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/PerfilievAlexandr/chat-server/internal/repository.HistoryRepository -o history_repository_minimock.go -n HistoryRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/PerfilievAlexandr/chat-server/internal/domain"
	"github.com/gojuno/minimock/v3"
)

// HistoryRepositoryMock implements repository.HistoryRepository
type HistoryRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSaveHistory          func(ctx context.Context, req domain.Message) (err error)
	inspectFuncSaveHistory   func(ctx context.Context, req domain.Message)
	afterSaveHistoryCounter  uint64
	beforeSaveHistoryCounter uint64
	SaveHistoryMock          mHistoryRepositoryMockSaveHistory
}

// NewHistoryRepositoryMock returns a mock for repository.HistoryRepository
func NewHistoryRepositoryMock(t minimock.Tester) *HistoryRepositoryMock {
	m := &HistoryRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SaveHistoryMock = mHistoryRepositoryMockSaveHistory{mock: m}
	m.SaveHistoryMock.callArgs = []*HistoryRepositoryMockSaveHistoryParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHistoryRepositoryMockSaveHistory struct {
	mock               *HistoryRepositoryMock
	defaultExpectation *HistoryRepositoryMockSaveHistoryExpectation
	expectations       []*HistoryRepositoryMockSaveHistoryExpectation

	callArgs []*HistoryRepositoryMockSaveHistoryParams
	mutex    sync.RWMutex
}

// HistoryRepositoryMockSaveHistoryExpectation specifies expectation struct of the HistoryRepository.SaveHistory
type HistoryRepositoryMockSaveHistoryExpectation struct {
	mock    *HistoryRepositoryMock
	params  *HistoryRepositoryMockSaveHistoryParams
	results *HistoryRepositoryMockSaveHistoryResults
	Counter uint64
}

// HistoryRepositoryMockSaveHistoryParams contains parameters of the HistoryRepository.SaveHistory
type HistoryRepositoryMockSaveHistoryParams struct {
	ctx context.Context
	req domain.Message
}

// HistoryRepositoryMockSaveHistoryResults contains results of the HistoryRepository.SaveHistory
type HistoryRepositoryMockSaveHistoryResults struct {
	err error
}

// Expect sets up expected params for HistoryRepository.SaveHistory
func (mmSaveHistory *mHistoryRepositoryMockSaveHistory) Expect(ctx context.Context, req domain.Message) *mHistoryRepositoryMockSaveHistory {
	if mmSaveHistory.mock.funcSaveHistory != nil {
		mmSaveHistory.mock.t.Fatalf("HistoryRepositoryMock.SaveHistory mock is already set by Set")
	}

	if mmSaveHistory.defaultExpectation == nil {
		mmSaveHistory.defaultExpectation = &HistoryRepositoryMockSaveHistoryExpectation{}
	}

	mmSaveHistory.defaultExpectation.params = &HistoryRepositoryMockSaveHistoryParams{ctx, req}
	for _, e := range mmSaveHistory.expectations {
		if minimock.Equal(e.params, mmSaveHistory.defaultExpectation.params) {
			mmSaveHistory.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveHistory.defaultExpectation.params)
		}
	}

	return mmSaveHistory
}

// Inspect accepts an inspector function that has same arguments as the HistoryRepository.SaveHistory
func (mmSaveHistory *mHistoryRepositoryMockSaveHistory) Inspect(f func(ctx context.Context, req domain.Message)) *mHistoryRepositoryMockSaveHistory {
	if mmSaveHistory.mock.inspectFuncSaveHistory != nil {
		mmSaveHistory.mock.t.Fatalf("Inspect function is already set for HistoryRepositoryMock.SaveHistory")
	}

	mmSaveHistory.mock.inspectFuncSaveHistory = f

	return mmSaveHistory
}

// Return sets up results that will be returned by HistoryRepository.SaveHistory
func (mmSaveHistory *mHistoryRepositoryMockSaveHistory) Return(err error) *HistoryRepositoryMock {
	if mmSaveHistory.mock.funcSaveHistory != nil {
		mmSaveHistory.mock.t.Fatalf("HistoryRepositoryMock.SaveHistory mock is already set by Set")
	}

	if mmSaveHistory.defaultExpectation == nil {
		mmSaveHistory.defaultExpectation = &HistoryRepositoryMockSaveHistoryExpectation{mock: mmSaveHistory.mock}
	}
	mmSaveHistory.defaultExpectation.results = &HistoryRepositoryMockSaveHistoryResults{err}
	return mmSaveHistory.mock
}

// Set uses given function f to mock the HistoryRepository.SaveHistory method
func (mmSaveHistory *mHistoryRepositoryMockSaveHistory) Set(f func(ctx context.Context, req domain.Message) (err error)) *HistoryRepositoryMock {
	if mmSaveHistory.defaultExpectation != nil {
		mmSaveHistory.mock.t.Fatalf("Default expectation is already set for the HistoryRepository.SaveHistory method")
	}

	if len(mmSaveHistory.expectations) > 0 {
		mmSaveHistory.mock.t.Fatalf("Some expectations are already set for the HistoryRepository.SaveHistory method")
	}

	mmSaveHistory.mock.funcSaveHistory = f
	return mmSaveHistory.mock
}

// When sets expectation for the HistoryRepository.SaveHistory which will trigger the result defined by the following
// Then helper
func (mmSaveHistory *mHistoryRepositoryMockSaveHistory) When(ctx context.Context, req domain.Message) *HistoryRepositoryMockSaveHistoryExpectation {
	if mmSaveHistory.mock.funcSaveHistory != nil {
		mmSaveHistory.mock.t.Fatalf("HistoryRepositoryMock.SaveHistory mock is already set by Set")
	}

	expectation := &HistoryRepositoryMockSaveHistoryExpectation{
		mock:   mmSaveHistory.mock,
		params: &HistoryRepositoryMockSaveHistoryParams{ctx, req},
	}
	mmSaveHistory.expectations = append(mmSaveHistory.expectations, expectation)
	return expectation
}

// Then sets up HistoryRepository.SaveHistory return parameters for the expectation previously defined by the When method
func (e *HistoryRepositoryMockSaveHistoryExpectation) Then(err error) *HistoryRepositoryMock {
	e.results = &HistoryRepositoryMockSaveHistoryResults{err}
	return e.mock
}

// SaveHistory implements repository.HistoryRepository
func (mmSaveHistory *HistoryRepositoryMock) SaveHistory(ctx context.Context, req domain.Message) (err error) {
	mm_atomic.AddUint64(&mmSaveHistory.beforeSaveHistoryCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveHistory.afterSaveHistoryCounter, 1)

	if mmSaveHistory.inspectFuncSaveHistory != nil {
		mmSaveHistory.inspectFuncSaveHistory(ctx, req)
	}

	mm_params := HistoryRepositoryMockSaveHistoryParams{ctx, req}

	// Record call args
	mmSaveHistory.SaveHistoryMock.mutex.Lock()
	mmSaveHistory.SaveHistoryMock.callArgs = append(mmSaveHistory.SaveHistoryMock.callArgs, &mm_params)
	mmSaveHistory.SaveHistoryMock.mutex.Unlock()

	for _, e := range mmSaveHistory.SaveHistoryMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSaveHistory.SaveHistoryMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveHistory.SaveHistoryMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveHistory.SaveHistoryMock.defaultExpectation.params
		mm_got := HistoryRepositoryMockSaveHistoryParams{ctx, req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveHistory.t.Errorf("HistoryRepositoryMock.SaveHistory got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveHistory.SaveHistoryMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveHistory.t.Fatal("No results are set for the HistoryRepositoryMock.SaveHistory")
		}
		return (*mm_results).err
	}
	if mmSaveHistory.funcSaveHistory != nil {
		return mmSaveHistory.funcSaveHistory(ctx, req)
	}
	mmSaveHistory.t.Fatalf("Unexpected call to HistoryRepositoryMock.SaveHistory. %v %v", ctx, req)
	return
}

// SaveHistoryAfterCounter returns a count of finished HistoryRepositoryMock.SaveHistory invocations
func (mmSaveHistory *HistoryRepositoryMock) SaveHistoryAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveHistory.afterSaveHistoryCounter)
}

// SaveHistoryBeforeCounter returns a count of HistoryRepositoryMock.SaveHistory invocations
func (mmSaveHistory *HistoryRepositoryMock) SaveHistoryBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveHistory.beforeSaveHistoryCounter)
}

// Calls returns a list of arguments used in each call to HistoryRepositoryMock.SaveHistory.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveHistory *mHistoryRepositoryMockSaveHistory) Calls() []*HistoryRepositoryMockSaveHistoryParams {
	mmSaveHistory.mutex.RLock()

	argCopy := make([]*HistoryRepositoryMockSaveHistoryParams, len(mmSaveHistory.callArgs))
	copy(argCopy, mmSaveHistory.callArgs)

	mmSaveHistory.mutex.RUnlock()

	return argCopy
}

// MinimockSaveHistoryDone returns true if the count of the SaveHistory invocations corresponds
// the number of defined expectations
func (m *HistoryRepositoryMock) MinimockSaveHistoryDone() bool {
	for _, e := range m.SaveHistoryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveHistoryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveHistoryCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveHistory != nil && mm_atomic.LoadUint64(&m.afterSaveHistoryCounter) < 1 {
		return false
	}
	return true
}

// MinimockSaveHistoryInspect logs each unmet expectation
func (m *HistoryRepositoryMock) MinimockSaveHistoryInspect() {
	for _, e := range m.SaveHistoryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HistoryRepositoryMock.SaveHistory with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveHistoryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveHistoryCounter) < 1 {
		if m.SaveHistoryMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to HistoryRepositoryMock.SaveHistory")
		} else {
			m.t.Errorf("Expected call to HistoryRepositoryMock.SaveHistory with params: %#v", *m.SaveHistoryMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveHistory != nil && mm_atomic.LoadUint64(&m.afterSaveHistoryCounter) < 1 {
		m.t.Error("Expected call to HistoryRepositoryMock.SaveHistory")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HistoryRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSaveHistoryInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HistoryRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HistoryRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSaveHistoryDone()
}
